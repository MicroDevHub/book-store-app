import mongoose from 'mongoose';import { Order } from "./order";import { OrderStatus } from "@hh-bookstore/common";interface BookAttrs {    title: string;    price: number;}export interface BookDoc extends mongoose.Document {    title: string;    price: number;    isReserved(): Promise<Boolean>;}interface BookModel extends mongoose.Model<BookDoc> {    build(attrs: BookAttrs): BookDoc;}const bookSchema = new mongoose.Schema(    {        title: {            type: String,            required: true        },        price: {            type: Number,            required: true,            min: 0        },    },    {        toJSON: {            transform(doc, ret) {                ret.id = ret._id;                delete ret._id;            }        }    });bookSchema.statics.build = (attrs: BookAttrs) => {    return new Book(attrs);};bookSchema.methods.isReserved = async function() {    // Run query to look at all orders. Find an order where the book    // is the book we just found *and* the order status is *not* cancelled.    // If we find an order from that means the book *is* reserved    // this === the book document that we just called 'isReserved' on    const existingOrder = await Order.findOne({        book: this as any,        status: {            $in: [                OrderStatus.Created,                OrderStatus.AwaitingPayment,                OrderStatus.Complete            ]        }    });    return !!existingOrder;}const Book = mongoose.model<BookDoc, BookModel>('Book', bookSchema);export { Book };