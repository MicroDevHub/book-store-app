import request from 'supertest';import { app } from '../../app';import mongoose from 'mongoose';import {Book} from "../../models/book";const createBook = async () => {    const book = Book.build({        title: 'tram nam khong quen',        price: 20    })    return await book.save();};it('returns a 404 if the order is not found', async () => {    const orderId = new mongoose.Types.ObjectId().toHexString();    await request(app)        .get(`/api/books/${orderId}`)        .send()        .expect(404);});it('returns an error if one user tries to fetch another users order', async () => {    const userOne = await global.getCookie();    const userTwo = await global.getCookie();    const book = await createBook();    const { body: order } = await request(app).post('/api/orders')        .set('Cookie', userOne)        .send({            bookId: book.id        })        .expect(201)    await request(app).get(`/api/orders/${order.id }`)        .set('Cookie', userTwo)        .send()        .expect(401)})it('returns the order if the order is found and is authorised', async () => {    const cookie = await global.getCookie();    const book = await createBook();    const { body: order } = await request(app).post('/api/orders')        .set('Cookie', cookie)        .send({            bookId: book.id        })        .expect(201)    const { body: fetchedOrder } = await request(app).get(`/api/orders/${order.id }`)        .set('Cookie', cookie)        .send()        .expect(200)    expect(fetchedOrder.id).toEqual(order.id);})