import request from 'supertest';import { app } from '../../app';it('should return a 201 on successful signup', () => {    return request(app)        .post('/api/users/signup')        .send({            email: 'test@test.com',            password: 'password'        })        .expect(201);});it('should returns a 400 with an invalid email', () => {    return request(app)        .post('/api/users/signup')        .send({            email: 'test.com',            password: 'password'        })        .expect(400);});it('should returns a 400 with an invalid password', () => {    return request(app)        .post('/api/users/signup')        .send({            email: 'test@test.com',            password: 'p'        })        .expect(400);});it('should returns a 400 with missing email and password', async () => {    await request(app)        .post('/api/users/signup')        .send({            email: 'test@test.com'        })        .expect(400);    await request(app)        .post('/api/users/signup')        .send({            password: 'test@test.com'        })        .expect(400);});it('should disallow duplicate emails', async () => {    await request(app)        .post('/api/users/signup')        .send({            email: 'test@test.com',            password: 'password'        })        .expect(201);    await request(app)        .post('/api/users/signup')        .send({            email: 'test@test.com',            password: 'password'        })        .expect(400);});it('should sets a cookie after successful signup', async () => {    const response = await request(app)        .post('/api/users/signup')        .send({            email: 'test@test.com',            password: 'password'        })        .expect(201);    expect(response.get('Set-Cookie')).toBeDefined();}); 